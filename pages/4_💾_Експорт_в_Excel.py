import streamlit as st
import pandas as pd
import io
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤–µ—Å—å –º–æ–¥—É–ª—å apppp
try:
    import apppp
except ImportError:
    st.error("–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª 'apppp.py'. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î –≤ –∫–æ—Ä–µ–Ω–µ–≤—ñ–π –ø–∞–ø—Ü—ñ.")
    st.stop()

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó DataFrame –≤ Excel ---
def dataframe_to_excel(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î Pandas DataFrame —É –±–∞–π—Ç–æ–≤–∏–π –ø–æ—Ç—ñ–∫ Excel-—Ñ–∞–π–ª—É."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Inventory Export')
    processed_data = output.getvalue()
    return processed_data

# --- –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –µ–∫—Å–ø–æ—Ä—Ç—É ---
st.header("üíæ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –≤ Excel")

st.write("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–Ω–∫–∏, —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç–∏ –¥–æ —Ñ–∞–π–ª—É –µ–∫—Å–ø–æ—Ä—Ç—É.")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∑ apppp
items_data, _ = apppp.load_items_from_db(limit=None, offset=None, search_term=None) # –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ, —ñ–≥–Ω–æ—Ä—É—é—á–∏ total_count

if not items_data:
    st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.")
else:
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
    all_export_columns = {
        "id": "ID",
        "name": "–ù–∞–∑–≤–∞",
        "initial_quantity": "–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫-—Å—Ç—å",
        "remaining_qty": "–ó–∞–ª–∏—à–æ–∫",
        "sold_qty": "–ü—Ä–æ–¥–∞–Ω–æ –∫-—Å—Ç—å",
        "cost_usd": "–í–∞—Ä—Ç—ñ—Å—Ç—å ($)", # –ó–∞–ª–∏—à–∞—î–º–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        "shipping_usd": "–î–æ—Å—Ç–∞–≤–∫–∞ ($)", # –ó–∞–ª–∏—à–∞—î–º–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        "origin_country": "–ö—Ä–∞—ó–Ω–∞", # –î–æ–¥–∞–Ω–æ
        "original_currency": "–í–∞–ª—é—Ç–∞", # –î–æ–¥–∞–Ω–æ
        "cost_original": "–í–∞—Ä—Ç—ñ—Å—Ç—å (–æ—Ä–∏–≥.)", # –î–æ–¥–∞–Ω–æ
        "shipping_original": "–î–æ—Å—Ç–∞–≤–∫–∞ (–æ—Ä–∏–≥.)", # –î–æ–¥–∞–Ω–æ
        "rate": "–ö—É—Ä—Å –¥–æ –≥—Ä–Ω",
        "cost_uah": "–í–∞—Ä—Ç—ñ—Å—Ç—å (–≥—Ä–Ω)",
        "customs_uah": "–ú–∏—Ç–æ (–≥—Ä–Ω)",
        "total_expenses_per_item": "–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (–≥—Ä–Ω/–∑–∞–ø–∏—Å)",
        "avg_sell_price": "–°–µ—Ä. —Ü—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–≥—Ä–Ω/–æ–¥.)",
        "total_income_per_item": "–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ (–≥—Ä–Ω/–∑–∞–ø–∏—Å)",
        "profit_loss_per_item": "–ü—Ä–∏–±—É—Ç–æ–∫/–ó–±–∏—Ç–æ–∫ (–≥—Ä–Ω/–∑–∞–ø–∏—Å)",
        "description": "–û–ø–∏—Å",
        "created_at": "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É"
    }

    column_options = list(all_export_columns.values())
    default_export_columns = ["ID", "–ù–∞–∑–≤–∞", "–ó–∞–ª–∏—à–æ–∫", "–í–∞—Ä—Ç—ñ—Å—Ç—å (–≥—Ä–Ω)", "–ú–∏—Ç–æ (–≥—Ä–Ω)", "–°–µ—Ä. —Ü—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–≥—Ä–Ω/–æ–¥.)", "–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ (–≥—Ä–Ω/–∑–∞–ø–∏—Å)", "–ü—Ä–∏–±—É—Ç–æ–∫/–ó–±–∏—Ç–æ–∫ (–≥—Ä–Ω/–∑–∞–ø–∏—Å)"]

    selected_column_names = st.multiselect(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É:",
        options=column_options,
        default=default_export_columns,
        key="export_column_selector"
    )

    if not selected_column_names:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.")
    else:
        export_data = []
        for item in items_data:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ apppp.get_item_sales_info_cached
            sold_qty, avg_price = apppp.get_item_sales_info_cached(item)
            initial_qty = item.get('initial_quantity', 0)
            remaining_qty = initial_qty - sold_qty
            cost_uah = item.get('cost_uah', 0.0)
            customs_uah = item.get('customs_uah', 0.0)
            total_expenses = (cost_uah if cost_uah else 0.0) + (customs_uah if customs_uah else 0.0)
            total_income = sold_qty * avg_price
            unit_cost = total_expenses / initial_qty if initial_qty > 0 else 0
            profit_loss = total_income - (sold_qty * unit_cost) if sold_qty > 0 else 0.0

            item_export_data = {
                "id": item.get('id'),
                "name": item.get('name', ''),
                "initial_quantity": initial_qty,
                "remaining_qty": remaining_qty,
                "sold_qty": sold_qty,
                "cost_usd": item.get('cost_usd'),
                "shipping_usd": item.get('shipping_usd'),
                "origin_country": item.get('origin_country'),
                "original_currency": item.get('original_currency'),
                "cost_original": item.get('cost_original'),
                "shipping_original": item.get('shipping_original'),
                "rate": item.get('rate'),
                "cost_uah": cost_uah,
                "customs_uah": customs_uah,
                "total_expenses_per_item": total_expenses,
                "avg_sell_price": avg_price if sold_qty > 0 else None,
                "total_income_per_item": total_income,
                "profit_loss_per_item": profit_loss if sold_qty > 0 else None,
                "description": item.get('description', ''),
                "created_at": item.get('created_at')
            }
            export_data.append(item_export_data)

        df_export_full = pd.DataFrame(export_data)
        selected_keys = [key for key, value in all_export_columns.items() if value in selected_column_names]
        valid_export_keys = [key for key in selected_keys if key in df_export_full.columns]

        if valid_export_keys:
            df_export_selected = df_export_full[valid_export_keys]
            df_export_selected.columns = [all_export_columns[key] for key in valid_export_keys]
            excel_bytes = dataframe_to_excel(df_export_selected)

            st.download_button(
                label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –¥–∞–Ω—ñ –≤ Excel",
                data=excel_bytes,
                file_name='inventory_selected_export.xlsx',
                mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                key='export_selected_button'
            )
        else:
            st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –∑ –≤–∏–±—Ä–∞–Ω–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏.")

