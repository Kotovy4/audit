import streamlit as st
import locale
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å–ø—ñ–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –∫–ª—ñ—î–Ω—Ç supabase –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É
try:
    from apppp import (
        supabase,
        load_items_from_db,
        get_item_by_db_id,
        get_item_sales_info_cached,
        format_currency
    )
except ImportError:
    st.error("–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª 'apppp.py' –∞–±–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.")
    st.stop()

def display_statistics():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—ñ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    # st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤") # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–ø–µ—Ä –±–µ—Ä–µ—Ç—å—Å—è –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É

    items_data = load_items_from_db() # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ –∫–µ—à—É/–ë–î
    if not items_data:
         st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
         return

    total_initial_items_sum = 0
    total_sold_items_sum = 0
    entries_with_sales = 0
    unsold_entries = 0
    total_expenses = 0.0
    total_income_actual = 0.0
    unsold_items_cost = 0.0

    for item in items_data:
        # –Ü—Å—Ç–æ—Ä—ñ—è –≤–∂–µ –º–∞—î –±—É—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –≤ item –∑–∞–≤–¥—è–∫–∏ load_items_from_db
        initial_qty = item.get('initial_quantity', 0)
        cost_uah = item.get('–≤–∞—Ä—Ç—ñ—Å—Ç—å_uah', 0.0)
        customs_uah = item.get('–º–∏—Ç–æ_uah', 0.0)
        unit_cost = (cost_uah + customs_uah) / initial_qty if initial_qty > 0 else 0

        total_initial_items_sum += initial_qty
        total_expenses += cost_uah + customs_uah

        item_sold_qty, _ = get_item_sales_info_cached(item)
        item_income = 0.0
        sales_history = item.get('sales_history', [])

        if sales_history:
            entries_with_sales += 1
            for sale in sales_history:
                qty = sale.get('quantity_sold', 0)
                price = sale.get('price_per_unit_uah', 0.0)
                item_income += qty * price
        else:
            unsold_entries += 1

        total_sold_items_sum += item_sold_qty
        total_income_actual += item_income

        remaining_qty = initial_qty - item_sold_qty
        if remaining_qty > 0:
            unsold_items_cost += remaining_qty * unit_cost

    overall_profit_loss = total_income_actual - total_expenses

    st.markdown("#### –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col1, col2 = st.columns(2)
    col1.metric("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤", len(items_data))
    col1.metric("–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∞ –∫-—Å—Ç—å –æ–¥.", total_initial_items_sum)
    col1.metric("–ó–∞–≥–∞–ª—å–Ω–æ –ø—Ä–æ–¥–∞–Ω–æ –æ–¥.", total_sold_items_sum)
    col2.metric("–ó–∞–ø–∏—Å–∏ –∑ –ø—Ä–æ–¥–∞–∂–∞–º–∏", entries_with_sales)
    col2.metric("–ó–∞–ø–∏—Å–∏ –±–µ–∑ –ø—Ä–æ–¥–∞–∂", unsold_entries)

    st.markdown("---")
    col1, col2 = st.columns(2)
    col1.metric("–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (–Ω–∞ –≤—Å—ñ –æ–¥.)", format_currency(total_expenses))
    col1.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ (–∑ –ø—Ä–æ–¥–∞–Ω–∏—Ö –æ–¥.)", format_currency(total_income_actual))
    col2.metric("–ü—Ä–∏–±—É—Ç–æ–∫ / –ó–±–∏—Ç–æ–∫ (–î–æ—Ö—ñ–¥ - –í—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏)", format_currency(overall_profit_loss))
    col2.metric("–í–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ", format_currency(unsold_items_cost))

    st.markdown("---")
    st.markdown("#### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É")
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID, –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —É —Å—Ç–∞–Ω—ñ —Å–µ—Å—ñ—ó –∑ —ñ–Ω—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    selected_item_id = st.session_state.get('selected_item_id', None)
    selected_item_data = None
    if selected_item_id:
         # –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –≤ items_data, —è–∫—ñ –º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
         for item in items_data:
              if item['id'] == selected_item_id:
                   selected_item_data = item
                   break

    if selected_item_data:
        s_initial_qty = selected_item_data.get('initial_quantity', 0)
        s_cost_uah = selected_item_data.get('–≤–∞—Ä—Ç—ñ—Å—Ç—å_uah', 0.0)
        s_customs_uah = selected_item_data.get('–º–∏—Ç–æ_uah', 0.0)
        s_sales_history = selected_item_data.get('sales_history', [])

        s_expenses = s_cost_uah + s_customs_uah
        s_unit_cost = s_expenses / s_initial_qty if s_initial_qty > 0 else 0
        s_sold_qty, s_avg_sell_price = get_item_sales_info_cached(selected_item_data)
        s_income = s_sold_qty * s_avg_sell_price if s_sold_qty > 0 else 0.0
        s_remaining_qty = s_initial_qty - s_sold_qty
        s_profit_loss = s_income - (s_sold_qty * s_unit_cost) if s_sold_qty > 0 else None

        st.write(f"**–ù–∞–∑–≤–∞:** {selected_item_data.get('name', '–ù/–î')}")
        col1, col2, col3 = st.columns(3)
        col1.metric("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫-—Å—Ç—å", s_initial_qty)
        col2.metric("–ü—Ä–æ–¥–∞–Ω–æ –∫-—Å—Ç—å", s_sold_qty)
        col3.metric("–ó–∞–ª–∏—à–æ–∫ –∫-—Å—Ç—å", s_remaining_qty)

        col1, col2 = st.columns(2)
        col1.metric("–í–∏—Ç—Ä–∞—Ç–∏ (–Ω–∞ –≤–µ—Å—å –∑–∞–ø–∏—Å)", format_currency(s_expenses))
        col2.metric("–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ 1 –æ–¥.", format_currency(s_unit_cost))
        col1.metric("–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–∑–∞ 1 –æ–¥.)", format_currency(s_avg_sell_price) if s_sold_qty > 0 else "---")
        col2.metric("–î–æ—Ö—ñ–¥ (–∑ –ø—Ä–æ–¥–∞–Ω–∏—Ö –æ–¥.)", format_currency(s_income))
        st.metric("–ü—Ä–∏–±—É—Ç–æ–∫ / –ó–±–∏—Ç–æ–∫ (–∑ –ø—Ä–æ–¥–∞–Ω–∏—Ö)", format_currency(s_profit_loss) if s_profit_loss is not None else "---")

    else:
        st.info("–¢–æ–≤–∞—Ä –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ '–ü–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# --- –ì–æ–ª–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ---
st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
display_statistics()

