import streamlit as st
import locale
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤–µ—Å—å –º–æ–¥—É–ª—å apppp
try:
    import apppp # –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–æ–¥–∞—Ç–∫—É, –¥–µ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è —Å–ø—ñ–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ supabase –∫–ª—ñ—î–Ω—Ç
except ImportError:
    st.error("–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª 'apppp.py'. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î –≤ –∫–æ—Ä–µ–Ω–µ–≤—ñ–π –ø–∞–ø—Ü—ñ.")
    st.stop() # –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

def display_statistics():
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤—ñ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é."""
    # st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤") # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–ø–µ—Ä –±–µ—Ä–µ—Ç—å—Å—è –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –í–°–Ü —Ç–æ–≤–∞—Ä–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é —Ç–∞ –ø–æ—à—É–∫
    # –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: items_data - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤, _ - –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—É—Ç)
    items_data, _ = apppp.load_items_from_api(limit=None, offset=None, search_term=None) 
    
    if not items_data:
         st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
         return

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—É–º–∏
    total_initial_items_sum = 0
    total_sold_items_sum = 0
    entries_with_sales = 0
    unsold_entries = 0
    total_expenses = 0.0
    total_income_actual = 0.0
    unsold_items_cost = 0.0

    print("--- –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏) ---") # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

    for index, item in enumerate(items_data): # –¢–µ–ø–µ—Ä item - —Ü–µ —Å–ª–æ–≤–Ω–∏–∫
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ item –¥—ñ–π—Å–Ω–æ —î —Å–ª–æ–≤–Ω–∏–∫–æ–º
        if not isinstance(item, dict):
            print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ø—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç —É items_data (–Ω–µ —Å–ª–æ–≤–Ω–∏–∫): {item}")
            continue

        print(f"\n–û–±—Ä–æ–±–∫–∞ —Ç–æ–≤–∞—Ä—É ID: {item.get('id')}, –ù–∞–∑–≤–∞: {item.get('name', '–ù/–î')}")

        # --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É ---
        item_expense = 0.0
        try:
            initial_qty = item.get('initial_quantity', 0)
            cost_uah = item.get('cost_uah', 0.0)
            customs_uah = item.get('customs_uah', 0.0)

            initial_qty_val = int(initial_qty) if initial_qty is not None else 0
            cost_uah_val = float(cost_uah) if cost_uah is not None else 0.0
            customs_uah_val = float(customs_uah) if customs_uah is not None else 0.0

            print(f"  -> –í–∏—Ç—Ä–∞—Ç–∏: cost_uah={cost_uah_val}, customs_uah={customs_uah_val}, initial_qty={initial_qty_val}")

            item_expense = cost_uah_val + customs_uah_val
            total_expenses += item_expense

            unit_cost = item_expense / initial_qty_val if initial_qty_val > 0 else 0
            total_initial_items_sum += initial_qty_val

        except (ValueError, TypeError) as e:
            print(f"  -> –ü–û–ú–ò–õ–ö–ê —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏—Ç—Ä–∞—Ç –¥–ª—è —Ç–æ–≤–∞—Ä—É ID {item.get('id')}: {e}")
            unit_cost = 0

        # --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ—Ö–æ–¥—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É ---
        item_sold_qty, avg_price = apppp.get_item_sales_info_cached(item)
        item_income = 0.0
        sales_history = item.get('sales_history', [])

        if sales_history: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ sales_history –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ entries_with_sales, —è–∫—â–æ —â–µ –Ω–µ –±—É–ª–æ (—Ö–æ—á–∞ —Ü–µ –º–∞–ª–æ –± –±—É—Ç–∏ –∑—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ, –∞–ª–µ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
            if entries_with_sales == 0 and item_sold_qty > 0 : entries_with_sales = 0 
            if item_sold_qty > 0: entries_with_sales +=1
            
            print(f"  -> –ó–Ω–∞–π–¥–µ–Ω–æ {len(sales_history)} –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤.")
            for sale_index, sale in enumerate(sales_history):
                try:
                    qty = sale.get('quantity_sold', 0)
                    price = sale.get('price_per_unit_uah', 0.0)

                    qty_val = int(qty) if qty is not None else 0
                    price_val = float(price) if price is not None else 0.0

                    print(f"    -> –ü—Ä–æ–¥–∞–∂ {sale_index+1}: qty={qty_val}, price={price_val}")

                    if qty_val > 0 and price_val >= 0:
                         item_income += qty_val * price_val
                    else:
                         print(f"    -> –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∂—É –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ (qty={qty_val}, price={price_val})")

                except (ValueError, TypeError) as e:
                    print(f"    -> –ü–û–ú–ò–õ–ö–ê –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–¥–∞–∂—É {sale_index+1} –¥–ª—è —Ç–æ–≤–∞—Ä—É ID {item.get('id')}: {e}")
        else:
            unsold_entries += 1

        total_sold_items_sum += item_sold_qty
        total_income_actual += item_income

        # --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–ª–∏—à–∫—É ---
        remaining_qty = initial_qty_val - item_sold_qty
        if remaining_qty > 0:
            unsold_items_cost += remaining_qty * unit_cost

    print(f"--- –ö—ñ–Ω–µ—Ü—å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: –ó–∞–≥.–≤–∏—Ç—Ä–∞—Ç–∏={total_expenses}, –ó–∞–≥.–¥–æ—Ö—ñ–¥={total_income_actual} ---")

    overall_profit_loss = total_income_actual - total_expenses

    # --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ apppp.format_currency) ---
    st.markdown("#### –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col1, col2 = st.columns(2)
    col1.metric("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤", len(items_data))
    col1.metric("–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∞ –∫-—Å—Ç—å –æ–¥.", total_initial_items_sum)
    col1.metric("–ó–∞–≥–∞–ª—å–Ω–æ –ø—Ä–æ–¥–∞–Ω–æ –æ–¥.", total_sold_items_sum)
    col2.metric("–ó–∞–ø–∏—Å–∏ –∑ –ø—Ä–æ–¥–∞–∂–∞–º–∏", entries_with_sales)
    col2.metric("–ó–∞–ø–∏—Å–∏ –±–µ–∑ –ø—Ä–æ–¥–∞–∂", unsold_entries)

    st.markdown("---")
    col1, col2 = st.columns(2)
    col1.metric("–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (–Ω–∞ –≤—Å—ñ –æ–¥.)", apppp.format_currency(total_expenses))
    col1.metric("–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ (–∑ –ø—Ä–æ–¥–∞–Ω–∏—Ö –æ–¥.)", apppp.format_currency(total_income_actual))
    col2.metric("–ü—Ä–∏–±—É—Ç–æ–∫ / –ó–±–∏—Ç–æ–∫ (–î–æ—Ö—ñ–¥ - –í—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏)", apppp.format_currency(overall_profit_loss))
    col2.metric("–í–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ", apppp.format_currency(unsold_items_cost))

    st.markdown("---")
    st.markdown("#### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É")
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ selected_item_id, —è–∫–∏–π –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ü–µ—Ä–µ–≥–ª—è–¥—É
    selected_item_id = st.session_state.get('selected_item_id_for_stats', None)
    selected_item_data = None
    if selected_item_id:
         selected_item_data = apppp.get_item_by_db_id(selected_item_id)

    if selected_item_data:
        s_initial_qty = selected_item_data.get('initial_quantity', 0)
        s_cost_uah = selected_item_data.get('cost_uah', 0.0)
        s_customs_uah = selected_item_data.get('customs_uah', 0.0)
        # s_sales_history = selected_item_data.get('sales_history', []) # –í–∂–µ —î –≤ selected_item_data

        s_cost_uah_val = float(s_cost_uah) if s_cost_uah is not None else 0.0
        s_customs_uah_val = float(s_customs_uah) if s_customs_uah is not None else 0.0
        s_initial_qty_val = int(s_initial_qty) if s_initial_qty is not None else 0

        s_expenses = s_cost_uah_val + s_customs_uah_val
        s_unit_cost = s_expenses / s_initial_qty_val if s_initial_qty_val > 0 else 0
        s_sold_qty, s_avg_sell_price = apppp.get_item_sales_info_cached(selected_item_data)
        s_income = s_sold_qty * s_avg_sell_price if s_sold_qty > 0 else 0.0
        s_remaining_qty = s_initial_qty_val - s_sold_qty
        s_profit_loss = s_income - (s_sold_qty * s_unit_cost) if s_sold_qty > 0 else None

        st.write(f"**–ù–∞–∑–≤–∞:** {selected_item_data.get('name', '–ù/–î')}")
        col1, col2, col3 = st.columns(3)
        col1.metric("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫-—Å—Ç—å", s_initial_qty_val)
        col2.metric("–ü—Ä–æ–¥–∞–Ω–æ –∫-—Å—Ç—å", s_sold_qty)
        col3.metric("–ó–∞–ª–∏—à–æ–∫ –∫-—Å—Ç—å", s_remaining_qty)

        col1, col2 = st.columns(2)
        col1.metric("–í–∏—Ç—Ä–∞—Ç–∏ (–Ω–∞ –≤–µ—Å—å –∑–∞–ø–∏—Å)", apppp.format_currency(s_expenses))
        col2.metric("–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ 1 –æ–¥.", apppp.format_currency(s_unit_cost))
        col1.metric("–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–∑–∞ 1 –æ–¥.)", apppp.format_currency(s_avg_sell_price) if s_sold_qty > 0 else "---")
        col2.metric("–î–æ—Ö—ñ–¥ (–∑ –ø—Ä–æ–¥–∞–Ω–∏—Ö –æ–¥.)", apppp.format_currency(s_income))
        st.metric("–ü—Ä–∏–±—É—Ç–æ–∫ / –ó–±–∏—Ç–æ–∫ (–∑ –ø—Ä–æ–¥–∞–Ω–∏—Ö)", apppp.format_currency(s_profit_loss) if s_profit_loss is not None else "---")

    else:
        st.info("–¢–æ–≤–∞—Ä –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ '–ü–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# --- –ì–æ–ª–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ---
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–¥–µ –≤–∑—è—Ç–æ –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É "3_üìä_–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
# st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
display_statistics()

