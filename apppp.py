import streamlit as st
from supabase import create_client, Client
from datetime import datetime
import locale
import os

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–º–∞—î –±—É—Ç–∏ –ø–µ—Ä—à–æ—é –∫–æ–º–∞–Ω–¥–æ—é Streamlit) ---
st.set_page_config(layout="wide", page_title="AUDIT –û–±–ª—ñ–∫")

# --- –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ –±—ñ—á–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ (–ü–ï–†–ï–ú–Ü–©–ï–ù–û –°–Æ–î–ò) ---
st.sidebar.title("AUDIT") # <--- –ú–ê–Ñ –ë–£–¢–ò –¢–£–¢, –û–î–†–ê–ó–£ –ü–Ü–°–õ–Ø set_page_config

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—ñ ---
try:
    locale.setlocale(locale.LC_ALL, 'uk_UA.UTF-8')
except locale.Error:
    print("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª–æ–∫–∞–ª—å 'uk_UA.UTF-8' –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, —Å–ø—Ä–æ–±–∞ 'uk_UA'.")
    try:
        locale.setlocale(locale.LC_ALL, 'uk_UA')
    except locale.Error:
        print("–õ–æ–∫–∞–ª—å 'uk_UA' —Ç–∞–∫–æ–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.")
        # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –ª–æ–∫–∞–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        def format_currency(value):
            if value is None: return "---"
            try: return f"{value:,.2f} ‚Ç¥"
            except (ValueError, TypeError): return "–ü–æ–º–∏–ª–∫–∞"
else:
    # –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º locale
    def format_currency(value):
        if value is None: return "---"
        try: return locale.currency(value, symbol='‚Ç¥', grouping=True)
        except (ValueError, TypeError): return "–ü–æ–º–∏–ª–∫–∞"

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase ---
@st.cache_resource
def init_supabase_client():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–ª—ñ—î–Ω—Ç Supabase."""
    try:
        SUPABASE_URL = st.secrets["supabase"]["url"]
        SUPABASE_KEY = st.secrets["supabase"]["key"]
        print("–°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase...")
        client = create_client(SUPABASE_URL, SUPABASE_KEY)
        print("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase —É—Å–ø—ñ—à–Ω–µ.")
        return client
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase: {e}")
        st.error(f"""
            **–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Supabase.**
            –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç—ñ–≤ Streamlit —Ç–∞ –¥–∞–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É Supabase.
            –ü–æ–º–∏–ª–∫–∞: {e}
        """)
        return None

supabase = init_supabase_client() # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç

# --- –°–ø—ñ–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ ---

@st.cache_data(ttl=60)
def load_items_from_db():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–æ–≤–∞—Ä–∏ –∑ Supabase —Ç–∞ —ó—Ö —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ–¥–∞–∂—ñ–≤."""
    if not supabase:
        # st.error("–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤.")
        return []
    try:
        response = supabase.table('items').select('*').order('id').execute()
        if response.data:
            items_with_history = []
            for item in response.data:
                 item['sales_history'] = load_sales_history_for_item(item['id'])
                 items_with_history.append(item)
            print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(items_with_history)} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é.")
            return items_with_history
        else:
            print("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
            return []
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ë–î: {e}")
        return []

def load_sales_history_for_item(item_id):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ–¥–∞–∂—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É."""
    if not supabase:
        return []
    try:
        response = supabase.table('sales').select('*').eq('item_id', item_id).order('sale_timestamp').execute()
        return response.data if response.data else []
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–æ–¥–∞–∂—ñ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä—É {item_id}: {e}")
        return []

def get_item_by_db_id(db_id):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Å–ª–æ–≤–Ω–∏–∫ —Ç–æ–≤–∞—Ä—É –≤ –∫–µ—à—ñ inventory_list –∑–∞ –π–æ–≥–æ ID –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    items = load_items_from_db()
    for item in items:
        if item.get('id') == db_id:
            return item
    return None

def get_item_sales_info_cached(item_data):
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –ø—Ä–æ–¥–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–µ—à–æ–≤–∞–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é."""
    sales_history = item_data.get('sales_history', [])
    total_sold_qty = 0
    total_sales_value = 0.0
    if not sales_history:
        return 0, 0.0

    for sale in sales_history:
        qty = sale.get('quantity_sold', 0)
        price = sale.get('price_per_unit_uah', 0.0)
        if isinstance(qty, (int, float)) and isinstance(price, (int, float)):
             total_sold_qty += qty
             total_sales_value += qty * price
        else:
             print(f"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö —É –∑–∞–ø–∏—Å—ñ –ø—Ä–æ–¥–∞–∂—É: qty={qty}, price={price}")

    average_sell_price = total_sales_value / total_sold_qty if total_sold_qty > 0 else 0.0
    return total_sold_qty, average_sell_price

def calculate_uah_cost(cost_usd, shipping_usd, rate):
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤ UAH."""
    try:
        cost = float(cost_usd or 0)
        shipping = float(shipping_usd or 0)
        rate_val = float(rate or 0)
        if rate_val > 0:
            return (cost + shipping) * rate_val
        else:
            return 0.0
    except (ValueError, TypeError):
        return 0.0

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –¥–æ–¥–∞—Ç–∫—É ---
if 'selected_item_id' not in st.session_state:
    st.session_state.selected_item_id = None
if 'editing_item_id' not in st.session_state:
    st.session_state.editing_item_id = None
if 'selling_item_id' not in st.session_state:
    st.session_state.selling_item_id = None
if 'viewing_history_item_id' not in st.session_state:
    st.session_state.viewing_history_item_id = None
if 'editing_sale_id' not in st.session_state:
    st.session_state.editing_sale_id = None
    st.session_state.editing_sale_item_id = None
if 'confirm_delete_id' not in st.session_state:
     st.session_state.confirm_delete_id = None
if 'confirm_delete_sale_id' not in st.session_state:
     st.session_state.confirm_delete_sale_id = None
     st.session_state.confirm_delete_sale_item_id = None
# –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å—Ç–∞–Ω–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º —Å–ø–æ—Å–æ–±–æ–º –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
# (–ó–∞–ª–∏—à–∞—î–º–æ —Ü–µ–π –∫–æ–¥ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —Å—Ç–∞—Ä—ñ —Å—Ç–∞–Ω–∏ —â–µ —ñ—Å–Ω—É—é—Ç—å)
if 'current_view' in st.session_state:
     del st.session_state['current_view']
if 'show_statistics' in st.session_state:
     del st.session_state['show_statistics']
if 'stats_selected_item_id' in st.session_state:
     del st.session_state['stats_selected_item_id']


# --- –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ---
# –¶–µ–π –∫–æ–¥ –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤ pages
# –ê–±–æ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–π–¥–µ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É (—è–∫—â–æ –≤–æ–Ω–∞ —î)
st.title("üìä –ü—Ä–æ–≥—Ä–∞–º–∞ –æ–±–ª—ñ–∫—É —Ç–æ–≤–∞—Ä—ñ–≤")
st.write("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –Ω–∞ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ –∑–ª—ñ–≤–∞.")
st.info("–¶–µ –≥–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞. –û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑–¥—ñ–ª–∞—Ö –±—ñ—á–Ω–æ–≥–æ –º–µ–Ω—é.")

# --- –î–æ–¥–∞—Ç–∫–æ–≤–æ: –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É (–¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏) ---
# st.sidebar.button("–û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à –¥–∞–Ω–∏—Ö", on_click=st.cache_data.clear)
